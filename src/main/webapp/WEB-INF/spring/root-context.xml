<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
<!-- 		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"/> -->
		<property name="url" 			 value="jdbc:oracle:thin:@localhost:1521:XE"/>
<!-- 		<property name="url" 			 value="jdbc:log4jdbc:oracle:thin:@localhost:1521:XE"/> -->
		<property name="username" 		 value="SPRING"/>
		<property name="password" 		 value="SPRING"/>
	</bean>
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="dataSource" 	ref="dataSource"></property>
	</bean>
	
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSession"></constructor-arg>
	</bean>
		
	<!-- 트랜잭션 처리를 위한 트랜잭션 매니저 추가 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 
		트랜잭션 처리(commit/rollback)
		1. JDBC : Connection 객체
		2. Mybatis : SqlSession 객체
		3. Spring : TransactionManager 객체 
	-->
	<!-- 트랜잭션 처리 XML과 Annotation 방식이 존재, Annotation 방식으로 할 때에는 
	 	  <tx:annotion-driven/>를 사용해야 함 -->
	 	  
	<!-- 트랜잭션 XML 방식 -->
	<!-- <tx:attribute />의 자식 엘리먼트로 <tx:method />를 사용하는데 이것을 이용하여  -->
	<!-- 트랜잭션을 적용할 메소드를 지정할 수 있음.  -->
	<!-- 1. read-only : 읽기 전용으로 처리, 트랜잭션 관리 대상에서 제외 -->
	<!-- 2. name : 메소드 이름 -->
	<!-- 3. no-rollback-for : 트랜잭션을 롤백하지 않을 예외 지정 -->
	<!-- 4. rollback-for : 트랜잭션을 롤백할 예외 지정 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="select*" read-only="true"/>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="insert*" rollback-for="Exception"/>
			<tx:method name="update*" rollback-for="Exception"/>
			<tx:method name="delete*" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config proxy-target-class="true">
		<aop:pointcut expression="execution(* com.fall.spring..*Impl.*(..))" id="serviceMethod"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethod"/>
	</aop:config>
	
	<!-- 파일 업로드 관련 빈 등록 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="100000000"></property>
		<property name="maxInMemorySize" value="100000000"></property>
	</bean>
	
	<!-- AOP XML 방식 -->
	<!-- 필요할 때마다 의존성 주입을 해줌 -->
<!-- 	<bean id="log" class="com.fall.spring.common.LogAdvice"></bean> -->
<!-- 	<bean id="logAfter" class="com.fall.spring.common.LogAfterAdvice"></bean> -->
<!-- 	<bean id="logAround" class="com.fall.spring.common.LogAroundAdvice"></bean> -->
<!-- 	<bean id="logStopWatch" class="com.fall.spring.common.LogStopWatch"></bean> -->
<!-- 	<aop:config> -->
<!-- 		<aop:pointcut expression="execution(* com.fall.spring..*Impl.*(..))" id="implPointCut"/> -->
<!-- 		<aop:aspect ref="logStopWatch"> -->
<!-- 			<aop:before method="printLog" pointcut-ref="implPointCut"/> -->
<!-- 			<aop:after method="printLogAfter" pointcut-ref="implPointCut"/> -->
<!-- 			<aop:around method="printLogAround" pointcut-ref="implPointCut"/> -->
<!-- 			<aop:around method="methodEstimate" pointcut-ref="implPointCut"/> -->
<!-- 		</aop:aspect> -->
<!-- 	</aop:config> -->
	
	<!-- *PointCut (메소드) 표현식 정리(execution 생략)
	-> 리턴타입 패키지명 클래스명 매개변수갯수 
	1. * org.kh.member.model.service.*.*(..)
	-> 모든 리턴형에 대해 org.kh.member.model.service 패키지에 있는 모든 클래스 밑에 모든 메소드(매개변수 0개 이상)	
	2. * org.kh.member.model.service..*.*(..)
	-> 모든 리턴형, org.kh.member.model.service 패키지 및 하위 패키지에 있는 모든 클래스 및 모든 메소드(매개변수 0개 이상)
	3. * org.kh.member.model.service..*.*()
	-> 모든 리턴형, org.kh.member.model.service 패키지 및 하위 패키지에 있는 모든 클래스 및 모든 메소드(매개변수 0개)
	4. * org.kh.member.model.service..*.*(*)
	-> 모든 리턴형, service패키지 및 하위 패키지 모든 클래스 및 모든 메소드(매개변수 1개)
	5. * org.kh.member.model.service..*.*(Integer,..)
	-> 모든 리턴형, service패키지 및 하위 패키지 모든 클래스 및 모든 메소드(첫번째는 정수, 0개 이상)
	6. int org.kh.member.service..*.*(Integer,..)
	-> 리턴형 int이고 service패키지 및 하위 패키지 모든 클래스 및 모든 메소드(첫번째는 정수, 0개 이상)
	7. int org.kh.member.service..*Impl.*(..)
	-> 리턴형 int이고 service패키지 및 하위 패키지에 있는 Impl로 끝나는 모든 클래스 및 모든 메소드(매개변수 0개 이상)
	 -->
	
</beans>
